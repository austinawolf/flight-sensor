#ifndef SDS_MOTION_TYPES_H_
#define SDS_MOTION_TYPES_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include "sdk_common.h"
#include "sds_motion_types.h"

/**
    * @brief Used in the motion structure to indicate which data is valid
*/
typedef uint8_t motion_data_flags_t;
#define QUATERNION_DATA 	(1<<0)
#define IMU_DATA 			(1<<1)
#define COMPASS_DATA 		(1<<2)
#define TIMESTAMP_DATA 		(1<<3)
#define MEMORY_DATA         (1<<4)

/**
    * @brief Enumeration of supported sample rates
*/
typedef uint8_t motion_rate_t;
#define _1_HZ 			0
#define _2_HZ 			1
#define _5_HZ 			2
#define _10_HZ 			3
#define _20_HZ 			4
#define _40_HZ 			5
#define _60_HZ 			6
#define _80_HZ 			7
#define _100_HZ 		8
#define _200_HZ 		9
#define MIN_SAMPLE_RATE _1_HZ
#define MAX_SAMPLE_RATE _200_HZ

/**
    * @brief Indicates what data is going to be generated
*/
// Yusuf Updated to collect only quaternian data
typedef uint8_t motion_mode_t;
#define QUATERNION_ONLY		0
#define COLLECT_ALL      	1
#define MIN_MOTION_MODE QUATERNION_ONLY
#define MAX_MOTION_MODE COLLECT_ALL

/**
    * @brief Indicates the amount of data generated by the different modes so that memory layer knows how much data to store
*/
typedef uint8_t motion_mode_data_size;
#define QUATERNION_ONLY_DATA_SIZE 16
#define COLLECT_ALL_DATA_SIZE 40

/**
    * @brief Timestamp type
*/
typedef unsigned long timestamp_ms_t;

/**
    * @brief Represents the state of the motion module. Will be saved in memory with a data session.
*/
typedef struct {
	motion_mode_t motion_mode;
	motion_rate_t motion_rate;
} session_info_t;

/**
    * @brief Structure to transfer motion data across modules
*/
typedef struct {
	uint32_t event;	
	timestamp_ms_t timestamp;
	int16_t gyro[3], accel[3], compass[3];
	int32_t quat[4];
	motion_data_flags_t data_flags;	
	int8_t status;
} motion_sample_t;

#endif
